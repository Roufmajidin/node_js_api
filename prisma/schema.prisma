// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id          String    @id @default(uuid())
  name        String
  email       String  @unique
  password    String
  image       String?
  is_admin    Int     @default(0)
  is_verified Int     @default(0)

  last_login DateTime? // Nullable
  created_at DateTime   @default(now())
  updated_at DateTime   @default(now())
}



model Seat {
  id          String    @id @default(uuid())
  room_id    String  
  row        String
  number     Int
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

}

model Room {
  id          String    @id @default(uuid())
  name       String
  total_seat Int
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  Waktu      Waktu[]
}

model Movie {
  id          String    @id @default(uuid())
  genre String
  judul String
  sinopsis String 
  gambar String?
  tahun Int
  actor_u String
  durasi     Int
  harga Int
  showTime   DateTime
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  waktu      Waktu[]
}

model Waktu {
  id          String    @id @default(uuid())
  time       DateTime
  movie_id   String   
  room_id    String  
  status Int @default(0)
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  movies     Movie     @relation(fields: [movie_id], references: [id])
  rooms      Room      @relation(fields: [room_id], references: [id])
}
model Method {

  id          String    @id @default(uuid())
  name        String
  description String
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  booking Booking []
}
model Booking {
  id          String    @id @default(uuid())
  data String @db.Text
  mp_id String  
  user_id String  
  qr_code String ?
  expired Int @default(1)
  booking_date DateTime
  created_at   DateTime @default(now())
  updated_at   DateTime @default(now())
  order        Order[]
  method       Method  @relation(fields: [mp_id], references: [id])
}
model Order {
  id          String    @id @default(uuid())
  booking_id String  
  user_id String  
  total_price Int
  link_pay String
  status Int @default(0)
  booking Booking @relation(fields: [booking_id], references: [id])
  created_at   DateTime @default(now())
  updated_at   DateTime @default(now())
} 