// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int     @id @default(autoincrement())
  name        String
  email       String  @unique
  password    String
  image       String?
  is_admin    Int     @default(0)
  is_verified Int     @default(0)

  last_login DateTime? // Nullable
  created_at DateTime   @default(now())
  updated_at DateTime   @updatedAt
  mahasiswa  Mahasiswa?
}

model Mahasiswa {
  id            Int      @id @default(autoincrement())
  user_id       Int      @unique
  user          User     @relation(fields: [user_id], references: [id])
  semester      Int
  nim           Int
  tanggal_lahir String
  tempat_lahir  String
  no_hp         Int
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt
}

model Seat {
  id         Int      @id @default(autoincrement())
  room_id    Int
  row        String
  number     Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  Booking Booking[]
}

model Room {
  id         Int      @id @default(autoincrement())
  name       String
  total_seat Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  Waktu      Waktu[]
}

model Movie {
  id    Int    @id @default(autoincrement())
  genre String
  judul String
  sinopsis String 
  gambar String?
  tahun Int
  actor_u String
  durasi     Int
  harga Int
  showTime   DateTime
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  waktu      Waktu[]
}

model Waktu {
  id         Int       @id @default(autoincrement())
  time       DateTime
  movie_id   Int
  room_id    Int
  status Int @default(0)
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  movies     Movie     @relation(fields: [movie_id], references: [id])
  rooms      Room      @relation(fields: [room_id], references: [id])
  Booking    Booking[]
}

model Booking {
  id           Int      @id @default(autoincrement())
  user_id      Int
  seat_id      Int
  method_payment String?
  qr_code String ?
  expired Int @default(1)
  booking_date DateTime
  waktu_id     Int
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt
  seats        Seat     @relation(fields: [seat_id], references: [id])
  waktu        Waktu    @relation(fields: [waktu_id], references: [id])
}
